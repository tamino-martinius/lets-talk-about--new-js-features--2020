doctype html
html
  head
      title Lets talk about ... Whats new and upcoming in JavaScript (2020)
      meta(charset='utf-8')
      link(href='styles.styl'  rel='stylesheet' type='text/css')
      doctype html
  body
    section.slides.layout-regular.template-default
      article.build
        h2 Lets Talk about ...
        h2 Whats new (and upcoming) in JS
        h2 2020 Edition
      article
        h1 Stages
        ul.build
          li Stage 0: Strawperson (Nothing/PoC)
          li Stage 1: Proposal (Polyfill)
          li Stage 2: Draft (Experimental)
          li Stage 3: Candidate (Spec compliant)
          li Stage 4: Finished (Shipping)
      article.section.build
        h2 Stage 0 (Strawperson)
        h2 Stage 1 (Proposal)
      article.build
        h2 Already mentioned
        ul.build
          li Nested Imports
          li Math Extensions
          //- Seeded Random
          //- Clamp
          //- Scale
          li Iterator Extensions
          //- Filter
          //- Map
          //- Count
          //- Min/Max
          //- Find
          //- Skip/Take
      article.build
        h1 Dedent
      article.build
        h2 Current
        pre
          | console.log(`
          |   query foo {
          |     bar
          |   }
          | `)
        pre
          |
          |
          |  query foo {
          |    bar
          |  }
          |
          |
          |
      article
        h2 Expected
        pre
          | console.log(`
          |   query foo {
          |     bar
          |   }
          | `)
        pre
          | query foo {
          |   bar
          | }
      article.build
        h2 Current Solution
        pre
          | import dedent from 'ts-dedent'
          |
          | console.log(dedent`
          |   query foo {
          |     bar
          |   }
          | `)
        pre
          | query foo {
          |   bar
          | }
      article.build
        h2 Problems
        pre
          | const query = dedent(sql)`
          |   select *
          |   from students
          |   where name = ${name}
          | `
        pre
          | const raw = dedent`
          |   select *
          |   from students
          |   where name = ${name}
          | `
          |
          | sql`${raw}`;
      article
        h2 Proposal
        pre
          | console.log(```
          |   query foo {
          |     bar
          |   }
          | ```)
        pre
          | query foo {
          |   bar
          | }
      article.build
        h1 UUID
      article.build
        h2 UUID
        pre
          | randomUUID();
        pre
          | // => "52e6953d-edbe-4953-be2e-65ed3836b2f0"
      article.build
        h1 Async Constructors
      article.build
        h2 Async Constructors
        pre
          | class X {
          |   async constructor() {
          |      await ...;
          |   }
          | }
        pre
          | class Y extends X {
          |   async constructor() {
          |      await.super();
          |   }
          | }
      article.build
        h1 Number.range
      article.build
        h2 Number.range
        pre
          | Number.range(0, Infinity)
          |   .take(1000)
          |   .filter((x) => !(x % 3))
          |   .toArray()
        pre
          | [...Number.range(1, 100, 2)]
          | // => odd number from 1 to 99
      article
        h2 BigInt.range
        pre
          | BigInt.range(0, Infinity)
          |   .take(1000)
          |   .filter((x) => !(x % 3))
          |   .toArray()
        pre
          | [...BigInt.range(1, 100, 2)]
          | // => odd number from 1 to 99
      article.build
        h1 Array
      article.build
        h2 Array.equals
        pre
          | [{
          |   foo: 'bar'
          | }, {
          |   foo: 'baz'
          | }].equals[{
          |     foo: 'bar'
          | }] // => false
        pre
          | [{ foo: 'bar' }, { foo: 'baz' }].equals([
          |   { foo: 'bar' }, { foo: 'baz' }
          | ]) // => true
      article.build
        h2 Array.uniqueBy
        pre
          | [1, 2, 3, 3, 2, 1].uniqueBy();
        pre
          | // => [1, 2, 3]
      article.build
        h2 Array.uniqueBy
        pre
          | data = [
          |   { id: 1, uid: 10000 },
          |   { id: 2, uid: 10000 },
          |   { id: 3, uid: 10001 }
          | ];
        pre
          | data.uniqueBy('uid');
          | // [
          | //   { id: 1, uid: 10000 },
          | //   { id: 3, uid: 10001 }
          | // ]
      article.build
        h2 Array.uniqueBy
        pre
          | data.uniqueBy(({ id, uid }) => `${id}-${uid}`);
        pre
          | // [
          | //   { id: 1, uid: 10000 },
          | //   { id: 2, uid: 10000 },
          | //   { id: 3, uid: 10001 }
          | // ]
      article.build
        h2 Array.item
        pre
          | [1, 2, 3].item(1);
        pre
          | // => 2
        pre
          | [1, 2, 3].item(-1);
        pre
          | // => 3
      article.build
        h1 await.ops
      article.build
        h2 await.ops
        pre
          | // before
          | await Promise.all(
          |   users.map(async x => fetchProfile(x.id))
          | )
        pre
          | // after
          | await.all users.map(
          |   async x => fetchProfile(x.id)
          | )
      article.build
        h2 await.ops
        pre
          | await.all expr
          | // => await Promise.all(expr)
        pre
          | await.race expr
          | // => await Promise.race(expr)
        pre
          | await.allSettled expr
          | // => await Promise.allSettled(expr)
        pre
          | await.any expr
          | // => await Promise.any(expr)

      article.section.build
        h2 Stage 2 (Draft)
        h2 Stage 3 (Candidate)
      article.build
        h2 Already mentioned
        ul.build
          li Observable
          li Decorators
          li Temporal
          li Promise Extensions
          li Set Extensions
          li Realms
      article.build
        h2 private
        h3 in classes or objects
        pre
          | class ColorFinder {
          |   static #red = "#ff0000";
          |   static #blue = "#00ff00";
          |   static #green = "#0000ff";
      article
        pre
          | class ColorFinder {
          |   static #red = "#ff0000";
          |   static #blue = "#00ff00";
          |   static #green = "#0000ff";
          |   static colorName(name) {
          |     switch (name) {
          |       case "red": return ColorFinder.#red;
          |       case "blue": return ColorFinder.#blue;
          |       case "green": return ColorFinder.#green;
          |       default: throw new RangeError("unknown color");
          |     }
          |   }
          | }
      article.build
        h1 Record
      article
        h1 Record & Tuple
      article.build
        h2 Record
        ul.build
          li immutable
          li object like
        pre
          | \#{ a: 1 }
      article.build
        h2 Record
        pre
          | assert({ a: 1 } !== { a: 1 });
        pre
          | assert(Object(\#{ a: 1 }) !== Object(\#{ a: 1 }));
        pre
          | assert(\#{ a: 1 } === \#{ a: 1 });
        pre
          | assert(\#{ a: NaN } === \#{ a: NaN });
        pre
          | assert(typeof \#{ a: 1 } === "record");
        pre
          | assert(\#{ a: 1 } === JSON.parseImmutable(
          |   JSON.stringify(\#{ a: 1 })
          | ));
      article.build
        h2 Record
        pre
          | assert(\#{ a: 1, b: 2 } === \#{ b: 2, a: 1 });
        pre
          | Object.keys(\#{ a: 1, b: 2 }) // => ["a", "b"]
          | Object.keys(\#{ b: 2, a: 1 }) // => ["a", "b"]
      article.build
        h2 Tuple
        ul.build
          li immutable
          li array like
        pre
          | \#[ 1, 2, 3 ]
      article.build
        h2 Tuple
        pre
          | assert([1, 2] !== [1, 2]);
        pre
          | assert(Object(\#[1, 2]) !== Object(\#[1, 2]));
        pre
          | assert(\#[1, 2] === \#[1, 2]);
        pre
          | assert(\#[NaN] === \#[NaN]);
        pre
          | assert(typeof \#[1, 2] === "tuple");
        pre
          | assert(\#[1, 2] === JSON.parseImmutable(
          |   JSON.stringify(\#[1, 2])
          | ));
      article.build
        h1 Import Assertions
      article.build
        h2 Import Assertions
        pre
          | import json from "./foo.json" assert { type: "json" };
        pre
          | import("foo.json", { assert: { type: "json" } });
      article.build
        h2 Import Assertions
        h3 using TypeScript / Babel
        pre
          | import * as data from "./foo.json";
        pre
          | // "compilerOptions": { "resolveJsonModule": true }
      article.build
        h1 Optional
        h2 Chaining
      article.build
        h2 Current
        pre
          | var query = 'input[name=foo]';
          | var $input = $form.querySelector(query)
          | var value = $input ? $input.value : undefined
      article.build
        h2 With optional chaining
        pre
          | var fooValue = $form.querySelector(query)?.value
        pre
          | var street = user?.address?.street
        pre
          | iterator.return?.() // manually close an iterator
      article.build
        h1 Nullish
        h2 Coalescing
      article.build
        h2 current
        pre
          | const undefinedValue =
          |   response.settings?.undefinedValue
          |   || 'some other default'
          | ; // result: 'some other default'
        pre
          | const nullValue =
          |   response.settings?.nullValue
          |   || 'some other default'
          | ; // result: 'some other default'
      article.build
        h2 current problems
        pre
          | response.settings?.showSplashScreen || true
        pre
          | // False evaluates to false, result: true
        pre
          | response.settings?.animationDuration || 300;
        pre
          | // 0 evaluates to false, result: 300
        pre
          | response.settings?.headerText || 'Hello, world!'
        pre
          | // '' evaluates to false, result: 'Hello, world!'
      article.build
        h2 Nullish Coalescing
        pre
          | response.settings?.showSplashScreen ?? true
        pre
          | response.settings?.animationDuration ?? 300;
        pre
          | response.settings?.headerText ?? 'Hello, world!'
      article.build
        h1 Numeric
        h2 Separators
      article.build
        h2 current
        pre
          | 1000000000
          | 101475938.38
          | // Is this a billion? a hundred millions? Ten millions?
        pre
          | let fee = 12300;
          | // is this 12,300? Or 123, because it's in cents?
        pre
          | let amount = 1234500;
          | // is this 1,234,500? Or cents, hence 12,345?
          | // Or financial, 4-fixed 123.45?
      article.build
        h2 Numeric Separators
        pre
          | 1_000_000_000           // Ah, so a billion
          | 101_475_938.38          // hundreds of millions
        pre
          | let fee = 123_00;       // $123 (12300 cents)
          | let fee = 12_300;       // $12,300 (thats much)
        pre
          | let amount = 12345_00;  // 12,345 (1234500 cents)
          | let amount = 123_4500;  // 123.45 (4-fixed fin.)
          | let amount = 1_234_500; // 1,234,500
      article.build
        h2 Numeric Separators
        pre
          | 0.000_001 // fractions
        pre
          | 1e10_000  // exponents
        pre
          | let nibbles = 0b1010_0001_1000_0101; // binary
        pre
          | let brandColor = 0x44_BB_44; // hex (colors)
      article.build
        h2 Top Level await
        pre
          | const connection = await dbConnector();
        pre
          | const strings = await import(`/i18n/${navigator.language}`);
      article
        img.bg(src="node_modules/lets-talk-about--template/assets/memes/all-the-things.jpg")
        h1 &nbsp;
        h1 Thats it
      article
        h2 Whats next?
        ul.build
          li
            a(href="https://v8.dev/features")
              | List of features added lately to v8
          li
            a(href="https://github.com/tc39/proposals")
              | List of proposals
          li
            a(href="https://babeljs.io/repl/")
              | Babel Playground
          li
            a(href="https://www.typescriptlang.org/play/")
              | TypeScript Playground
          li
            a(href="https://codepen.io/")
              | CodePen

      article.section
        h1 Questions?

    script(src='node_modules/lets-talk-about--template/main.js')
